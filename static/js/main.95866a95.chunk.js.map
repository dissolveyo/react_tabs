{"version":3,"sources":["components/Tabs/Tabs.tsx","App.tsx","index.tsx"],"names":["Tabs","tabs","selectedTabId","onTabSelected","selectedTab","find","tab","id","className","map","title","isTabSelected","href","onClick","handleClick","content","App","useState","setSelectedTabId","useMemo","ReactDOM","render","document","getElementById"],"mappings":"iMAQaA,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,cACAC,EACI,EADJA,cAEMC,EAAcH,EACjBI,MAAK,SAACC,GAAD,OAASA,EAAIC,KAAOL,MAAkBD,EAAK,GAUnD,OACE,sBAAK,UAAQ,gBAAb,UACE,qBAAKO,UAAU,gBAAf,SACE,6BACGP,EAAKQ,KAAI,SAACH,GACT,IAAQC,EAAcD,EAAdC,GAAIG,EAAUJ,EAAVI,MACNC,EAAgBJ,IAAOH,EAAYG,GAEzC,OACE,oBAEEC,UAAWG,EACP,YACA,GACJ,UAAQ,MALV,SAOE,mBACEC,KAAI,WAAML,GACV,UAAQ,UACRM,QAAS,kBA3BL,SAACP,GACJA,EAAPC,KAEGL,GACTC,EAAcG,GAuBaQ,CAAYR,IAH7B,SAKGI,KAXEH,UAmBdH,GACC,qBAAKI,UAAU,QAAQ,UAAQ,aAA/B,SACGJ,EAAYW,cChDVd,EAAO,CAClB,CAAEM,GAAI,QAASG,MAAO,QAASK,QAAS,eACxC,CAAER,GAAI,QAASG,MAAO,QAASK,QAAS,eACxC,CAAER,GAAI,QAASG,MAAO,QAASK,QAAS,gBAG7BC,EAAgB,WAC3B,MAA0CC,mBAAShB,EAAK,GAAGM,IAA3D,mBAAOL,EAAP,KAAsBgB,EAAtB,KAEMd,EAAce,mBAAQ,WAC1B,OAAOlB,EACJI,MAAK,SAACC,GAAD,OAASA,EAAIC,KAAOL,MAAkBD,EAAK,KAClD,CAACC,IAQJ,OACE,sBAAKM,UAAU,UAAf,UACE,oBAAIA,UAAU,QAAd,mCACsBJ,EAAYM,SAElC,cAAC,EAAD,CACET,KAAMA,EACNC,cAAeA,EACfC,cAdgB,SAACG,GACrB,IAAQC,EAAOD,EAAPC,GAERW,EAAiBX,UCrBrBa,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.95866a95.chunk.js","sourcesContent":["import { Tab } from '../../types/Tab';\n\ntype TabsProps = {\n  tabs: Tab[];\n  selectedTabId: string;\n  onTabSelected: (tab: Tab) => void\n};\n\nexport const Tabs: React.FC<TabsProps> = ({\n  tabs,\n  selectedTabId,\n  onTabSelected,\n}) => {\n  const selectedTab = tabs\n    .find((tab) => tab.id === selectedTabId) || tabs[0];\n\n  const handleClick = (tab: Tab) => {\n    const { id } = tab;\n\n    if (id !== selectedTabId) {\n      onTabSelected(tab);\n    }\n  };\n\n  return (\n    <div data-cy=\"TabsComponent\">\n      <div className=\"tabs is-boxed\">\n        <ul>\n          {tabs.map((tab) => {\n            const { id, title } = tab;\n            const isTabSelected = id === selectedTab.id;\n\n            return (\n              <li\n                key={id}\n                className={isTabSelected\n                  ? 'is-active'\n                  : ''}\n                data-cy=\"Tab\"\n              >\n                <a\n                  href={`#${id}`}\n                  data-cy=\"TabLink\"\n                  onClick={() => handleClick(tab)}\n                >\n                  {title}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      {selectedTab && (\n        <div className=\"block\" data-cy=\"TabContent\">\n          {selectedTab.content}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport { Tabs } from './components/Tabs';\nimport { Tab } from './types/Tab';\n\nexport const tabs = [\n  { id: 'tab-1', title: 'Tab 1', content: 'Some text 1' },\n  { id: 'tab-2', title: 'Tab 2', content: 'Some text 2' },\n  { id: 'tab-3', title: 'Tab 3', content: 'Some text 3' },\n];\n\nexport const App: React.FC = () => {\n  const [selectedTabId, setSelectedTabId] = useState(tabs[0].id);\n\n  const selectedTab = useMemo(() => {\n    return tabs\n      .find((tab) => tab.id === selectedTabId) || tabs[0];\n  }, [selectedTabId]);\n\n  const onTabSelected = (tab: Tab) => {\n    const { id } = tab;\n\n    setSelectedTabId(id);\n  };\n\n  return (\n    <div className=\"section\">\n      <h1 className=\"title\">\n        {`Selected tab is ${selectedTab.title}`}\n      </h1>\n      <Tabs\n        tabs={tabs}\n        selectedTabId={selectedTabId}\n        onTabSelected={onTabSelected}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}